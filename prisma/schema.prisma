// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kids
  unisex
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  inStock     Int
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // Relations between Product and Category
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // Relations between ProductImage and Product
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(USER)
  image         String?

  address UserAddress?
  Order   Order[]
}

model Country {
  id           String         @id
  name         String
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  zipCode   String
  phone     String
  city      String

  // Relations between Address and Country
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// order model
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  total        Float
  tax          Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations between Order and User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // Relations between OrderItem and Order
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  // Relations between OrderItem and Product
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  zipCode   String
  city      String
  phone     String

  // Relations between Address and Country
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
